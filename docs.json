[{"name":"Canvas","comment":" This module exposes a nice drawing API that works on top of the the DOM\ncanvas.\n\nSee instructions in the main page of the package for installation, as it\nrequires the `elm-canvas` web component to work.\n\n\n# Usage in HTML\n\n@docs toHtml\n\n\n# Drawing things\n\n@docs Renderable, Point\n\n@docs shapes, text\n\n\n# Styling the things you draw\n\n@docs fill, stroke\n\n\n# Drawing shapes\n\nShapes can be rectangles, circles, and different types of lines. By composing\nshapes, you can draw complex figures! There are bunch of functions that produce\na `Shape`, which you can feed to `shapes` to get something on the screen.\n\n@docs Shape\n\nHere are the different functions that produce shapes that we can draw.\n\n@docs rect, circle, arc, path\n\n\n## Path\n\nIn order to make a complex path, we need to put together a list of `PathSegment`\n\n@docs PathSegment, arcTo, bezierCurveTo, lineTo, moveTo, quadraticCurveTo\n\n\n# Drawing text\n\n@docs Text, TextAlign, TextBaseLine, size, family, align, baseLine\n\n\n# Advanced rendering concepts\n\n@docs lineDash, LineCap, lineCap, lineDashOffset, LineJoin, lineJoin, lineWidth, miterLimit\n\n@docs Shadow, shadow, alpha, GlobalCompositeOperationMode, compositeOperationMode\n\n@docs Transform, transform, translate, rotate, scale, applyMatrix\n\n","unions":[{"name":"GlobalCompositeOperationMode","comment":" Type of compositing operation, identifying which of the compositing or\nblending mode operations to use. See the chapter\n[Compositing](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing)\nfrom the Canvas Tutorial.\n\nFor more information and pictures of what each mode does, see the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation).\n\n","args":[],"cases":[["SourceOver",[]],["SourceIn",[]],["SourceOut",[]],["SourceAtop",[]],["DestinationOver",[]],["DestinationIn",[]],["DestinationOut",[]],["DestinationAtop",[]],["Lighter",[]],["Copy",[]],["Xor",[]],["Multiply",[]],["Screen",[]],["Overlay",[]],["Darken",[]],["Lighten",[]],["ColorDodge",[]],["ColorBurn",[]],["HardLight",[]],["SoftLight",[]],["Difference",[]],["Exclusion",[]],["Hue",[]],["Saturation",[]],["Color",[]],["Luminosity",[]]]},{"name":"LineCap","comment":" Type of end points for line drawn.\n\n  - `ButtCap`\n      - The ends of lines are squared off at the endpoints.\n  - `RoundCap`\n      - The ends of lines are rounded.\n  - `SquareCap`\n      - The ends of lines are squared off by adding a box with an equal width\n        and half the height of the line's thickness.\n\n","args":[],"cases":[["ButtCap",[]],["RoundCap",[]],["SquareCap",[]]]},{"name":"LineJoin","comment":" Determines how two connecting segments with non-zero lengths in a shape are\njoined together. [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)\n\n  - `Round`\n      - Rounds off the corners of a shape by filling an additional sector of disc\n        centered at the common endpoint of connected segments. The radius for these\n        rounded corners is equal to the line width.\n  - `Bevel`\n      - Fills an additional triangular area between the common endpoint of\n        connected segments, and the separate outside rectangular corners of each segment.\n  - `Miter`\n      - Connected segments are joined by extending their outside edges to connect\n        at a single point, with the effect of filling an additional lozenge-shaped\n        area. This setting is affected by the miterLimit property.\n\n","args":[],"cases":[["BevelJoin",[]],["RoundJoin",[]],["MiterJoin",[]]]},{"name":"PathSegment","comment":" In order to draw a path, you need to give the function `path` a list of\n`PathSegment`\n","args":[],"cases":[]},{"name":"Renderable","comment":" A `Renderable` is a thing that the canvas knows how to render.\n\nTo make a list of `Renderable` to pass to `Canvas.toHtml` look in the docs for\nthe functions that produce renderables, like `shapes` and `text`.\n\n","args":[],"cases":[]},{"name":"Shape","comment":" `shapes` takes a list of `Shape` with some `Setting`s and converts it into\na `Renderable` for the canvas.\n","args":[],"cases":[]},{"name":"Text","comment":" ","args":[],"cases":[]},{"name":"TextAlign","comment":" Type of text alignment\n\n  - `Left`\n      - The text is left-aligned.\n  - `Right`\n      - The text is right-aligned.\n  - `Center`\n      - The text is centered.\n  - `Start`\n      - The text is aligned at the normal start of the line (left-aligned for\n        left-to-right locales, right-aligned for right-to-left locales).\n  - `End`\n      - The text is aligned at the normal end of the line (right-aligned for\n        left-to-right locales, left-aligned for right-to-left locales).\n\n","args":[],"cases":[["Left",[]],["Right",[]],["Center",[]],["Start",[]],["End",[]]]},{"name":"TextBaseLine","comment":" Type of text baseline.\n\n  - `Top`\n      - The text baseline is the top of the em square.\n  - `Hanging`\n      - The text baseline is the hanging baseline. (Used by Tibetan and other Indic scripts.)\n  - `Middle`\n      - The text baseline is the middle of the em square.\n  - `Alphabetic`\n      - The text baseline is the normal alphabetic baseline.\n  - `Ideographic`\n      - The text baseline is the ideographic baseline; this is the bottom of the body of the characters, if the main body of characters protrudes beneath the alphabetic baseline. (Used by Chinese, Japanese and Korean scripts.)\n  - `Bottom`\n      - The text baseline is the bottom of the bounding box. This differs from the ideographic baseline in that the ideographic baseline doesn't consider descenders.\n\n","args":[],"cases":[["Top",[]],["Hanging",[]],["Middle",[]],["Alphabetic",[]],["Ideographic",[]],["Bottom",[]]]},{"name":"Transform","comment":" ","args":[],"cases":[["Rotate",["Basics.Float"]],["Scale",["Basics.Float","Basics.Float"]],["Translate",["Basics.Float","Basics.Float"]],["ApplyMatrix",["Basics.Float","Basics.Float","Basics.Float","Basics.Float","Basics.Float","Basics.Float"]]]}],"aliases":[{"name":"Point","comment":" A small alias to reference points on some of the functions on the package.\n\nThe first argument of the tuple is the `x` position, and the second is the `y`\nposition.\n\n    -- Making a point with x = 15 and y = 55\n    point : Point\n    point =\n        ( 15, 55 )\n\n","args":[],"type":"( Basics.Float, Basics.Float )"},{"name":"Shadow","comment":" ","args":[],"type":"{ blur : Basics.Float, color : Color.Color, offset : ( Basics.Float, Basics.Float ) }"}],"values":[{"name":"align","comment":" ","type":"Canvas.TextAlign -> Canvas.Renderable -> Canvas.Renderable"},{"name":"alpha","comment":" ","type":"Basics.Float -> Canvas.Renderable -> Canvas.Renderable"},{"name":"applyMatrix","comment":" Multiplies the current transformation with the matrix described by the\narguments of this method. You are able to scale, rotate, move and skew the\ncontext.\n\n  - `a` (m11)\n      - Horizontal scaling.\n  - `b` (m12)\n      - Horizontal skewing.\n  - `c` (m21)\n      - Vertical skewing.\n  - `d` (m22)\n      - Vertical scaling.\n  - `e` (dx)\n      - Horizontal moving.\n  - `f` (dy)\n      - Vertical moving.\n\n","type":"Basics.Float -> Basics.Float -> Basics.Float -> Basics.Float -> Basics.Float -> Basics.Float -> Canvas.Transform"},{"name":"arc","comment":" Creates an arc, a partial circle. It takes the position of the center of the\ncircle, the radius of it, the start angle where the arc will start, the end\nangle where the arc will end, and if it should draw anti-clockwise.\n\n    arc pos radius startAngle endAngle antiClockwise\n\n","type":"Canvas.Point -> Basics.Float -> Basics.Float -> Basics.Float -> Basics.Bool -> Canvas.Shape"},{"name":"arcTo","comment":" Adds an arc to the path with the given control points and radius.\n\nThe arc drawn will be a part of a circle, never elliptical. Typical use could be\nmaking a rounded corner.\n\nOne way to think about the arc drawn is to imagine two straight segments, from\nthe starting point (latest point in current path) to the first control point,\nand then from the first control point to the second control point. These two\nsegments form a sharp corner with the first control point being in the corner.\nUsing `arcTo`, the corner will instead be an arc with the given radius.\n\nThe arc is tangential to both segments, which can sometimes produce surprising\nresults, e.g. if the radius given is larger than the distance between the\nstarting point and the first control point.\n\nIf the radius specified doesn't make the arc meet the starting point (latest\npoint in the current path), the starting point is connected to the arc with\na straight line segment.\n\n    arcTo ( x1, y1 ) ( x2, y2 ) radius\n\nYou can see more examples and docs in [this page](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo)\n\n","type":"Canvas.Point -> Canvas.Point -> Basics.Float -> Canvas.PathSegment"},{"name":"baseLine","comment":" ","type":"Canvas.TextBaseLine -> Canvas.Renderable -> Canvas.Renderable"},{"name":"bezierCurveTo","comment":" Adds a cubic Bézier curve to the path. It requires three points. The first\ntwo points are control points and the third one is the end point. The starting\npoint is the last point in the current path, which can be changed using `moveTo`\nbefore creating the Bézier curve. You can learn more about this curve in the\n[MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo).\n\n    bezierCurveTo controlPoint1 controlPoint2 point\n\n    bezierCurveTo ( cp1x, cp1y ) ( cp2x, cp2y ) ( x, y )\n\n  - `cp1x`\n      - The x axis of the coordinate for the first control point.\n  - `cp1y`\n      - The y axis of the coordinate for the first control point.\n  - `cp2x`\n      - The x axis of the coordinate for the second control point.\n  - `cp2y`\n      - The y axis of the coordinate for the second control point.\n  - `x`\n      - The x axis of the coordinate for the end point.\n  - `y`\n      - The y axis of the coordinate for the end point.\n\n","type":"Canvas.Point -> Canvas.Point -> Canvas.Point -> Canvas.PathSegment"},{"name":"circle","comment":" Creates a circle. It takes the position of the center of the circle, and the\nradius of it.\n\n    circle pos radius\n\n","type":"Canvas.Point -> Basics.Float -> Canvas.Shape"},{"name":"compositeOperationMode","comment":" ","type":"Canvas.GlobalCompositeOperationMode -> Canvas.Renderable -> Canvas.Renderable"},{"name":"family","comment":" ","type":"String.String -> Canvas.Renderable -> Canvas.Renderable"},{"name":"fill","comment":" By default, renderables are drawn with black color. If you want to specify\na different color to draw, use this `Setting` on your renderable.\n\n    shapes\n        [ fill Color.green ]\n        [ rect ( 10, 30 ) 50 50 ]\n\n","type":"Color.Color -> Canvas.Renderable -> Canvas.Renderable"},{"name":"lineCap","comment":" ","type":"Canvas.LineCap -> Canvas.Renderable -> Canvas.Renderable"},{"name":"lineDash","comment":" ","type":"List.List Basics.Float -> Canvas.Renderable -> Canvas.Renderable"},{"name":"lineDashOffset","comment":" ","type":"Basics.Float -> Canvas.Renderable -> Canvas.Renderable"},{"name":"lineJoin","comment":" ","type":"Canvas.LineJoin -> Canvas.Renderable -> Canvas.Renderable"},{"name":"lineTo","comment":" Connects the last point in the previous shape to the x, y coordinates with a\nstraight line.\n\n    lineTo ( x, y )\n\nIf you want to make a line independently of where the previous shape ended, you\ncan use `moveTo` before using lineTo.\n\n","type":"Canvas.Point -> Canvas.PathSegment"},{"name":"lineWidth","comment":" ","type":"Basics.Float -> Canvas.Renderable -> Canvas.Renderable"},{"name":"miterLimit","comment":" ","type":"Basics.Float -> Canvas.Renderable -> Canvas.Renderable"},{"name":"moveTo","comment":" `moveTo` doesn't necessarily produce any shape, but it moves the starting\npoint somewhere so that you can use this with other lines.\n\n    moveTo point\n\n","type":"Canvas.Point -> Canvas.PathSegment"},{"name":"path","comment":" Creates a complex path as a shape from a list of `PathSegment` instructions.\n\nIt is mandatory to pass in the starting point for the path, since the path\nstarts with an implicit `moveTo` the starting point to avoid undesirable\nbehavior.\n\n    path startingPoint segments\n\n","type":"Canvas.Point -> List.List Canvas.PathSegment -> Canvas.Shape"},{"name":"quadraticCurveTo","comment":" Adds a quadratic Bézier curve to the path. It requires two points. The\nfirst point is a control point and the second one is the end point. The starting\npoint is the last point in the current path, which can be changed using `moveTo`\nbefore creating the quadratic Bézier curve. Learn more about quadratic bezier\ncurves in the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo)\n\n    quadraticCurveTo controlPoint point\n\n    quadraticCurveTo ( cpx, cpy ) ( x, y )\n\n  - `cpx`\n      - The x axis of the coordinate for the control point.\n  - `cpy`\n      - The y axis of the coordinate for the control point.\n  - `x`\n      - The x axis of the coordinate for the end point.\n  - `y`\n      - The y axis of the coordinate for the end point.\n\n","type":"Canvas.Point -> Canvas.Point -> Canvas.PathSegment"},{"name":"rect","comment":" Creates the shape of a rectangle. It needs the position of the top left\ncorner, the width, and the height.\n\n    rect pos width height\n\n","type":"Canvas.Point -> Basics.Float -> Basics.Float -> Canvas.Shape"},{"name":"rotate","comment":" ","type":"Basics.Float -> Canvas.Transform"},{"name":"scale","comment":" ","type":"Basics.Float -> Basics.Float -> Canvas.Transform"},{"name":"shadow","comment":" ","type":"Canvas.Shadow -> Canvas.Renderable -> Canvas.Renderable"},{"name":"shapes","comment":" We use `shapes` to render different shapes like rectangles, circles, and\nlines of different kinds that we can connect together.\n\nYou can draw many shapes with the same `Setting`s, which makes for very\nefficient rendering.\n\n    Canvas.toHtml ( width, height )\n        []\n        [ shapes [ fill Color.white ] [ rect ( 0, 0 ) w h ] ]\n\n","type":"List.List Canvas.Setting -> List.List Canvas.Shape -> Canvas.Renderable"},{"name":"size","comment":" What is the size of the text in pixels. Similar to the `font-size` property\nin CSS.\n","type":"Basics.Int -> Canvas.Renderable -> Canvas.Renderable"},{"name":"stroke","comment":" By default, renderables are drawn with no visible stroke. If you want to\nspecify a stroke color to draw an outline over your renderable, use this\n`Setting` on it.\n\n    shapes\n        [ stroke Color.red ]\n        [ rect ( 10, 30 ) 50 50 ]\n\n","type":"Color.Color -> Canvas.Renderable -> Canvas.Renderable"},{"name":"text","comment":" We use `text` to render text on the canvas. We need to pass the list of\nsettings to style it, the point with the coordinates where we want to render,\nand the text to render.\n\nKeep in mind that `align` changes where the text is positioned with regards to\nthe coordinates provided.\n\n    Canvas.toHtml ( width, height )\n        []\n        [ text [ size 48, align Center ] ( 50, 50 ) \"Hello world\" ]\n\n","type":"List.List Canvas.Setting -> Canvas.Point -> String.String -> Canvas.Renderable"},{"name":"toHtml","comment":" Create a Html element that you can use in your view.\n\n    Canvas.toHtml ( width, height )\n        [ onClick CanvasClick ]\n        [ shapes [ fill Color.white ] [ rect ( 0, 0 ) w h ]\n        , text [ size 48, align Center ] ( 50, 50 ) \"Hello world\"\n        ]\n\n`toHtml` is almost like creating other Html elements. We need to pass `(width,\nheight)` in pixels, a list of `Html.Attribute`, and finally _instead_ of a list\nof html elements, we pass a `List Renderable`. A `Renderable` is a thing that\nthe canvas knows how to render. Read on for more information 👇.\n\nNote: Remember to include the `elm-canvas` web component from npm in your page for\nthis to work!\n\n","type":"( Basics.Int, Basics.Int ) -> List.List (Html.Attribute msg) -> List.List Canvas.Renderable -> Html.Html msg"},{"name":"transform","comment":" ","type":"List.List Canvas.Transform -> Canvas.Renderable -> Canvas.Renderable"},{"name":"translate","comment":" ","type":"Basics.Float -> Basics.Float -> Canvas.Transform"}],"binops":[]}]